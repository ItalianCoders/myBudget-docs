################################################################################
#  Project: REST myBudget API
#  Copyright (c) Italiancoders
# 
################################################################################
swagger: '2.0'
################################################################################
#                              API Information                                 #
################################################################################
info:
  version: v1
  title: REST myBudget Api
  description: |
    ## Overview

    REST (Representational State Transfer) is the standard way of accessing
    resources over the web.

    It is done through four standard HTTP operations.

      * GET
      * POST (create)
      * PUT (update)
      * DELETE

    The _R_ in _REST_ refers to the representation (or format) of the resource
    being accessed.

    In our case, it is the web-standard [JSON](www.json.org) (JavaScript Object
    Notation) format.


    ### HTTP requests

    Section | Component             | Description
    --------|-----------------------|------------------------------------------------------------------------------------------
    Action  | HTTP operation | GET - retrieve a resource</br> PUT - replace a resource</br>POST - create a resource</br>DELETE - delete a resource
    Action  | HTTPS | The secure web protocol. It ensures that requests are encrypted between the application and the API
    Action  | xxx.com | The API gateway location
    Action  | /v1/ | The API version 
    Action  | /orders | The address of the resource you are accessing, orders in this case
    Request Header  | x-auth-token: x | The session security token x, is obtained on login via the /session API, and identifies amongst other things, the active account of the client using the API
    Request Header  | Content-Type: application/json | Request format type. This should always be set as indicated to json only
    Request Header  | Accept: application/json; charset=UTF-8 | Response format type. This should always be set as indicated to json only
    Request Body  | Only required for PUT or POST requests | JSON format


    ### HTTP Response

    Section | Component             | Description
    --------|-----------------------|------------------------------------------------------------------------------------------
    HTTP status code  | 200 OK | Request executed fine.
    HTTP status code  | 201 Created | Response to a POST that results in a creation.
    HTTP status code  | 204 No Content | Response to a successful request that won't be returning a body (like a DELETE request).
    HTTP status code  | 400 Bad Request | The request was invalid or cannot be served. The exact error should be explained in the error payload.
    HTTP status code  | 401 Unauthorized | The request requires an user authentication.
    HTTP status code  | 403 Forbidden | The server understood the request, but is refusing it or the access is not allowed (authenticated user doesn't have access to the resource).
    HTTP status code  | 404 Not found | When a non-existent resource is requested.
    HTTP status code  | 422 Unprocessable Entity | Used for validation errors (e.g. if an image cannot be formatted or mandatory fields are missing in the payload).
    HTTP status code  | 500 Internal Server Error | Tells the client something happened on the server and their request by itself was perfectly valid. The client can continue and try again with the request without modification.
    Response Body  | Request results, if any | JSON format.

    ### Errors

    Error responses contain a 4xx or 5xx HTTP status and a body with the
    following format:

    ```json
    {
        "error": {
            "type": "Exception", 
            "message": "Message describing the error", 
            "code": 190,
            "subcode": 460,
            "userTitle": "A title",
            "userMessage": "A message".
            "internal" {
              "exception": "message",
              "stackTrace: "..."
            }
        }
    }
    ```

    * _type_: error type
    * _message_: error message
    * _code_: error code
    * _subcode_: error subcode
    * _userTitle_: the error message title of popup id required
    * _userMessage_: message to show (the locale of the message depends on the language used during the login api request)
    * _internal_: available only on debug environment

    ### Paging

    Paging could be applied to a subset of endpoints returning a list of entries for some requests. 
    We are going to use the standard way of solving this problem by encoding the paging information in a URI query:

      /api/v1/foos?page=0&size=10
    
    A paged request will returns a paged response with the Page object envelop (see Page model).
    Below a Page response sample:

    ```json
      {
        content : [
            { ...  },
            { .... },
            ...
        ],
        first: true,
        last: false,
        size : 5,
        totalElements : 50,
        totalPages : 10,
        number : 0
      }
    ``` 

    If pagination is declared as mandatory for a rest resource, the __size__ parameter is mandatory.
    If not present an HTTP __404 Not found__ error is returned.
    If the page is not available an HTTP __404 Not found__ error is returned.

    The page number is zero-based index. If there are no results, a Page object is returned with a 0 length __content__ array.

    ### Sorting

    To have your results sorted on a particular property, add a sort URL parameter with the name of the property you want to sort the results on.
    You can control the direction of the sort by appending a "," to the the property name plus either _asc_ or _desc_. 
    
    To sort the results by more than one property, keep adding as many _sort=PROPERTY_ parameters as you need.

    Below a sort request sample:

      http://localhost:8080/api/v1/foos?page=1&size=10&sort=field1,desc&sort=field2,asc


    ### Date & Time

    myBudget API manage date as unix time (long number). Please read https://en.wikipedia.org/wiki/Unix_time


    ### API Versioning

    Only the major version number is put in the URL. The minor version doesn't  go in, because backwards compatibility is almost always guaranteed with the same major version.
    
    ### Facebook Social integration settings
    Facebook app id 362052714221226
    ### Google Social integration settings
    Google client id 1079647101570-pech7iq2v03fg1cl31molh6rr9740166.apps.googleusercontent.com


host: 'floating-ravine-25522.herokuapp.com'
basePath: /v1
schemes:
  - http
  - https
produces:
  - application/json
consumes:
  - application/json
securityDefinitions:
  api-auth-token:
    type: apiKey
    description: >-
      The session security token obtained on login via the /session API by
      response header x-auth-token property
    in: header
    name: x-auth-token
security:
  - api-auth-token: []


###############################################################################
# parameters
###############################################################################
parameters:
  pageParam:
    description: The page number (zero-based index)
    name: page
    type: integer
    in: query
    required: true


###############################################################################
# definitions
###############################################################################
definitions:

  ###############################################################################
  # definition: Page
  Page:
    type: object
    properties:
      content:
        type: array
        items:
          type: object    
      first:
        type: boolean
      last:
        type: boolean
      size:
        type: integer
      totalElements:
        type: integer
      totalPages:
        type: integer
      number:
        type: integer
    required: 
      - first
      - last
      - size
      - totalElements
      - totalPages
      - number
      
  ###############################################################################
  # definition: Error models
  
  ValidationError:
    description: Validation Error
    type: object
    properties:
      code:
        description: Validation Error code (Exception Name)
        type: string
      message:  
        description: Validation Error Message
        type: string

  ErrorDetail:
    description: Bad Request Error Detail
    type: object
    properties:
      title:
        description: Error Title
        type: string
      detail:
        description: Error Detail
        type: string
      timeStamp:
        description: unix time of the error instant
        type: number
        format: double
      developerMessage:
        description: error info for debug purpose
        type: string
      exception:
        description: identifier of error raised
        type: string
      code:
        description: error code
        type: integer
      subcode:
        description: subcode to represent different scenario for the same error
        type: integer
      validationErrors:
        type: object
        description: a map of list of validation errors. The key is the field name and the value a list of validation errors on this field
        additionalProperties:
          type: array
          items:
            $ref: '#/definitions/ValidationError'

  ###############################################################################
  # definition: User API      

  GenderEnum:
    description: Gender User
    type: integer
    enum:
      - Male
      - Female
      - Others
        
  SocialTypeEnum:
    description: Social enabled with integration with myBudget
    type: integer
    enum:
      - None
      - Facebook
      - Google
      


  User:
    type: object
    properties:
      username:
        description: Username choosen during the registration on myBudget service or the user id for FB user or email for Gmail User
        type: string
      password:
        description: Password choosen during the registration on myBudget service or  * for the social user
      email:
        description: Email of the user
      alias:
        description: Nickname to show on UI to represent the user.
        type: string
      profileImageUrl:
        description: Url of profile image
        type: string        
      firstname:
        type: string
      lastname:
        type: string
      socialType:
        $ref: '#/definitions/SocialTypeEnum'
      gender:
        $ref: '#/definitions/GenderEnum'           
    required:
      - username
      - password
      - alias

  ###############################################################################
  # definition: Login model to post on Login request
  # NB: if it is a login using social facebook integration put userid as username and * as password
  # NB: if it is a login using social google integration put email as username and * as password

  
  JwtAuthenticationRequest:
    type: object
    properties:
      username:
        description: Username choosen during the registration on myBudget service or the user id for FB user or email for Gmail User   
        type: string
      password:
        description: Password choosen during the registration on myBudget service or  * for the social    
        type: string
      socialAccessToken:
        description: access token of the social session or null for standard login    
        type: string
      socialAuthenticationType:
        $ref: '#/definitions/SocialTypeEnum'    
    required:
      - username
      - password

  AccountStatusEnum:
    description: Status of the account depending threshold on account balance
    type: integer
    enum:
      - Ok
      - Warning
      - Critical

  Account:
    type: object
    properties:
      id:
        description: unique id of the account   
        type: string
        readOnly: true
      name:
        description: Title of the account  
        type: string
      description:
        type: string
      numberOfUsers:
        type: integer
    required:
      - id
      - name      
      
  JwtAuthenticationResponse:
    type: object
    properties:
      user:
        $ref: '#/definitions/User' 
      refreshToken:
        description: refresh token used to refresh an expired access token    
        type: string
      accounts:
        type: array
        items:
           $ref: '#/definitions/Account'          
    required:
      - user
      - refreshToken

  RegistrationUser:
    type: object
    properties:
      username:
        type: string
        minLength: 4
      password:
        minLength: 5
      email:
        description: Email of the user
        type: string        
      firstname:
        type: string
      lastname:
        type: string
      gender:
        $ref: '#/definitions/GenderEnum'           
    required:
      - username
      - password
      - email      

###############################################################################
# API ENDPOINT
###############################################################################
paths:
  ###############################################################################
  # path: public/v1/login
  # error code: 10
  /public/v1/login:
    post:
      operationId: sessionPost
      tags:
        - Login
      description: |
        Creates a new API session obtaining session token for subsequent API access
      parameters:
        - name: jwtAuthenticationRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/JwtAuthenticationRequest'
      responses:
        '200':
          description: The session object
          schema:
            $ref: '#/definitions/JwtAuthenticationResponse'
          headers:
            x-auth-token:
              description: The session token
              type: string
        '401':
          description: Login failed
          
  /public/v1/register:
    post:
      operationId: registerAccount
      tags:
        - Registration
      description: |
        Creates a new myBudget Account
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/RegistrationUser'
      responses:
        '201':
          description: User correcly created
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid data to create an User
          schema:
            $ref: '#/definitions/ErrorDetail'          